// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var ReactDOMRe  = require("reason-react/lib/js/src/reactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/reasonReact.js");

var component = ReasonReact.reducerComponentWithRetainedProps("Button");

function make(count, onChange, _) {
  var handleClick = function () {
    return Curry._1(onChange, count + 1 | 0);
  };
  var updateEventListener = function (state) {
    var match = state[/* element */0][0];
    if (match) {
      var element = match[0];
      var match$1 = state[/* clickHandler */1][0];
      if (match$1) {
        element.removeEventListener("click", match$1[0]);
      }
      state[/* clickHandler */1][0] = /* Some */[handleClick];
      return element.addEventListener("click", handleClick);
    } else {
      return /* () */0;
    }
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              updateEventListener(self[/* state */4]);
              return /* NoUpdate */0;
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var oldSelf = param[/* oldSelf */0];
              if (oldSelf[/* retainedProps */5] !== newSelf[/* retainedProps */5] || oldSelf[/* state */4][/* element */0] !== newSelf[/* state */4][/* element */0]) {
                return updateEventListener(newSelf[/* state */4]);
              } else {
                return 0;
              }
            }),
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("button", {
                          ref: Curry._1(self[/* handle */0], (function (el, param) {
                                  param[/* state */4][/* element */0][0] = el === null ? /* None */0 : [el];
                                  return /* () */0;
                                }))
                        }, "Click to increment count: " + (String(count) + ""));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* element */[/* None */0],
                      /* clickHandler */[/* None */0]
                    ];
            }),
          /* retainedProps */onChange,
          /* reducer */(function (_, _$1) {
              return /* NoUpdate */0;
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var Button = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.reducerComponent("Button");

function make$1() {
  var newrecord = component$1.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", undefined, React.createElement("div", undefined, Pervasives.string_of_int(self[/* state */4])), ReasonReact.element(/* None */0, /* None */0, make(self[/* state */4], Curry._1(self[/* reduce */3], (function (newCount) {
                                return newCount;
                              })), /* array */[])));
    });
  newrecord[/* initialState */10] = (function () {
      return 0;
    });
  newrecord[/* reducer */12] = (function (newCount, _) {
      return /* Update */Block.__(0, [newCount]);
    });
  return newrecord;
}

var App = /* module */[
  /* component */component$1,
  /* make */make$1
];

ReactDOMRe.renderToElementWithId(ReasonReact.element(/* None */0, /* None */0, make$1(/* array */[])), "index");

exports.Button = Button;
exports.App    = App;
/* component Not a pure module */
